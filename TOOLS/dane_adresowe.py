# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PitTools
                                 A QGIS plugin
 Plugin ułątwiający pracę z danymi UEK PIT.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-02-06
        copyright            : (C) 2023 by Tomasz Mazuga
        email                : tmazuga@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Tomasz Mazuga'
__date__ = '2023-02-06'
__copyright__ = '(C) 2023 by Tomasz Mazuga'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import inspect
import time

from qgis.core import (QgsCoordinateReferenceSystem, QgsCoordinateTransform,
                       QgsFeatureSink, QgsGeometry, QgsMessageLog,
                       QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterNumber, QgsVectorLayer)
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QColor, QIcon

from .funkcje import *
from .geokodowanie_gugik import geokodowanie_adresu


class DaneAdresowe(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT_WEZLY = 'INPUT_WEZLY'
    INPUT_WEZLY_OBCE = 'INPUT_WEZLY_OBCE'
    INPUT_PUNKTY_LACZENIA = 'INPUT_PUNKTY_LACZENIA'
    INPUT_PUNKTY_ZAKONCZENIA = 'INPUT_PUNKTY_ZAKONCZENIA'
    INPUT_LICZBA_OBIEKTOW = 'INPUT_LICZBA_OBIEKTOW'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.INPUT_LICZBA_OBIEKTOW,
                description=self.tr('Liczba obiektów do geokodowania [ 1 - 300 ]'),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=250,
                optional=False,
                minValue=1,
                maxValue=300
                ))

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_WEZLY,
                self.tr('Warstwa  węzłów WW [punktowa]'),
                [QgsProcessing.TypeVectorPoint], defaultValue=layer_by_part_of_name('wezly')
            )
            )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_WEZLY_OBCE,
                self.tr('Warstwa  węzłów obcych WO [punktowa]'),
                [QgsProcessing.TypeVectorPoint], defaultValue=layer_by_part_of_name('wezly_obce')
            )
            )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_PUNKTY_LACZENIA,
                self.tr('Warstwa  punktów łączenia kabla [punktowa]'),
                [QgsProcessing.TypeVectorPoint], defaultValue=layer_by_part_of_name('punkty_laczenia_kabla')
            )
            )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_PUNKTY_ZAKONCZENIA,
                self.tr('Warstwa  zakonczenia_sieci [punktowa]'),
                [QgsProcessing.TypeVectorPoint], defaultValue=layer_by_part_of_name('zakonczenia_sieci')
            )
            )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        headers = {'Accept': 'application/json'}


        def _zlicz_obiekty_z_pusta_geom(layer: QgsVectorLayer) -> int:
            ile_pustych = 0
            for x in layer.getFeatures():
                if x['flag'] == '0' and (x.geometry().isEmpty() or x.geometry().isNull()):
                    ile_pustych += 1
                else:
                    pass
            return ile_pustych


        def _field_index(layer: QgsVectorLayer, attr_name: str) -> int:
            """Funkcja zwraca index danego atrybutu w danej warstwie"""
            idx = layer.fields().indexOf(attr_name)
            return idx

        liczba_ob_do_geokod = int(self.parameterAsDouble(
            parameters,
            self.INPUT_LICZBA_OBIEKTOW,
            context))
        source_pkt_ww = self.parameterAsSource(parameters, self.INPUT_WEZLY, context)
        source_pkt_wo = self.parameterAsSource(parameters, self.INPUT_WEZLY_OBCE, context)
        source_pkt_lk = self.parameterAsSource(parameters, self.INPUT_PUNKTY_LACZENIA, context)
        source_pkt_zak = self.parameterAsSource(parameters, self.INPUT_PUNKTY_ZAKONCZENIA, context)
        puste_ww = _zlicz_obiekty_z_pusta_geom(source_pkt_ww)
        puste_wo = _zlicz_obiekty_z_pusta_geom(source_pkt_wo)
        puste_lk = _zlicz_obiekty_z_pusta_geom(source_pkt_lk)
        puste_zak = _zlicz_obiekty_z_pusta_geom(source_pkt_zak)
        suma_ob = puste_ww + puste_wo + puste_zak + puste_lk
        QgsMessageLog.logMessage(f'Zaczynam pracę...\nSuma_obiektow pozostałych do  geokodowania:  {suma_ob}\nwezly:'
                                 f' {puste_ww}\nwezły '
                                 f'obce: {puste_wo}\npunkty_laczenia_kabla: {puste_lk}\nzakonczenia_sieci: {puste_zak}')
        if liczba_ob_do_geokod >= suma_ob:
            QgsMessageLog.logMessage(f'Przetwarzam wszystkie {suma_ob} obiekty ')
        else:
            QgsMessageLog.logMessage(f'Przetwarzam  pierwsze {liczba_ob_do_geokod} obiekty ')


        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / liczba_ob_do_geokod if liczba_ob_do_geokod else 0
        current = 0

        # zlozenie transformacji z 2180 -> 4326
        sourceCrs = QgsCoordinateReferenceSystem(2180)
        destCrs = QgsCoordinateReferenceSystem(4326)
        tran = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())

        opracowywane_warstwy = [
            {'warstwa': 'wezly', 'miasto': 'city_name', 'ulica': 'street_name', 'numer': 'we07_nr_porzadkowy',
             'kod': 'postal_code', 'flaga': 'flag', 'latitude': 'we09_dlugosc',
             'longitude': 'we08_szerokosc'},
            {'warstwa': 'wezly_obce', 'miasto': 'city_name', 'ulica': 'street_name', 'numer': 'house_no',
             'kod': 'postal_code', 'flaga': 'flag', 'latitude': 'longitude', 'longitude': 'latitude', },
            {'warstwa': 'punkty_laczenia_kabla', 'miasto': 'city_name', 'ulica': 'street_name', 'numer': 'house_no',
             'kod': 'postal_code', 'flaga': 'flag', 'latitude': 'longitude', 'longitude': 'latitude' },
            {'warstwa': 'zakonczenia_sieci', 'miasto': 'city_name', 'ulica': 'street_name', 'numer': 'house_no',
             'kod': 'postal_code', 'flaga': 'flag', 'latitude': 'longitude', 'longitude': 'latitude'
             }
        ]

        # geokodowanie warstw
        for point_layer in opracowywane_warstwy:
            layer = layer_by_part_of_name(point_layer['warstwa'])
            layer_obiekty_do_przetworzenia = [x for x in layer.getFeatures() if (x[point_layer['flaga']] == '0' and (x.geometry().isEmpty() or x.geometry(
            ).isNull()))]
            flag_idx = _field_index(layer, point_layer['flaga'])
            latitude_idx = _field_index(layer, point_layer['latitude'])
            longitude_idx = _field_index(layer, point_layer['longitude'])
            for feature in layer_obiekty_do_przetworzenia:
                if current <= liczba_ob_do_geokod:
                    pass
                else:
                    continue
                if (feature.geometry().isEmpty() or feature.geometry().isNull()) and feature[point_layer['flaga']] == '0':
                    miasto = feature[point_layer['miasto']]
                    ulica = feature[point_layer['ulica']]
                    numer = feature[point_layer['numer']]
                    kod = feature[point_layer['kod']]
                    geom = geokodowanie_adresu(miasto, ulica, numer, kod)
                    time.sleep(1)
                    if geom.isNull():
                        attrs = {flag_idx: f'2'}
                        layer.dataProvider().changeAttributeValues({feature.id(): attrs})
                        current += 1
                        feedback.setProgress(int(current * total))
                    else:
                        layer.dataProvider().changeGeometryValues({feature.id(): geom})
                        geom.transform(tran)
                        x = geom.get().x()
                        y = geom.get().y()
                        attrs = {longitude_idx: f'{y:.5f}', latitude_idx: f'{x:.5f}', flag_idx: f'1'}
                        layer.dataProvider().changeAttributeValues({feature.id(): attrs})
                        current += 1
                        feedback.setProgress(int(current * total))
                    layer.commitChanges()
                    layer.triggerRepaint()
                    if feedback.isCanceled():
                        return {}
                else:
                    pass
        QgsMessageLog.logMessage(f'GOTOWE')
        return {}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting ch   aracters.
        """
        return '2. Aktualizacja danych adresowych.'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Tools'

    def shortHelpString(self):
        """ Returns a localised short helper string for the algorithm. This string
            should provide a basic description about what the algorithm does and the
            parameters and outputs associated with it.."""
        return self.tr(("""
             Algorytm geokoduje obiekty z wybranych warstw.
             
             Geokodowanie wykonywane jest za pomocą usługi UUG Uniwersalna Usługa Geokodowania udostępnianej przez 
             GUGiK 
             www.gov.pl/web/gugik
             http://services.gugik.gov.pl/uug
             
             PARAMETRY
             Liczba obiektów do geokodowania - wyznacza ile obiektów będzie mogło być geokodowanych w 1 "obiegu"
             algorytmu.
             Warstwy - zaczytują się automatycznie.
             
             Geokodowane są 4 warstwy, jeden "obieg" algorytmu geokoduje 1 - 300 obiektów w kolejności listy warstwy w 
             oknie algorytmu. Pomiędzy każdym zapytaniem o adres czeka 1 s.
             
             Jeżeli nie potrzebujesz geokodować zakonczenia_sieci - nie wykonuj algorytmu wiekszą ilość razy.
             
             Pomijane są adresy bez numerów  lub z numerami równymi 0.
             Aktualizowana jest geometria.
             Wpisywane są  dł/szer w ukłądzie WGS84.
             Uzupełnione elementy otrzymują  wartość w atrybucie flag = 1 (inne domyślnie mają tam 0)
             Obiekty z 0, które nie zostały zgeokodowane otrzymują flag = 2
             
             NIE MODYFIKOWAŁEM KODÓW TERC SIMC ULIC (pominąłem, ale to można łatwo dodać)
             Uzupełniane są warstwy: wezły (WW), wezly_obce (WO)   , punkty_laczenia_kabla (PL)  , zakonczenia_sieci 
             (Z)          
             """))

    def shortDescription(self):
        """
        Returns an optional translated short description of the algorithm. This should be at most
            a single sentence, e.g. “Converts 2D features to 3D by sampling a DEM raster.
            """
        return self.tr("Jakis opis.")

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(cmd_folder, 'icon_dane_adresowe.png'))
        return icon


    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DaneAdresowe()
